#!/usr/bin/perl

# -samy kamkar

use strict;
use Socket;

# file containing stored macs
# sub macs { return ('aa:bb:cc:dd:ee:ff' => 'my machine', ...) }
my $MACS          = "$ENV{HOME}/b/macs.pl";
my $ARP_PATH      = "arp";
my $IFCONFIG_PATH = "ifconfig";

my %known;
if (-e $MACS)
{
	require $MACS;
	my %known = macs();
}

#my @devs = @ARGV ? @ARGV : qw/bridge0 en0 en1 bridge100 vnic0 vnic1 eth0 eth1/;
my @devs = @ARGV ? @ARGV : map { /^(\w+)/ ? $1 : () } `$IFCONFIG_PATH -a`;

#arp();

# go through each device and scan network
foreach my $dev (@devs)
{
	my ($ip) = `$IFCONFIG_PATH $dev 2>>/dev/null` =~ /inet\s+(?:addr:)?(\S+)\.\d+\s/;

	if ($ip)
	{	
		print "Scanning $dev $ip.0/24\n";
		#`nmap -sn $ip.0/24`;
		# much faster to just "generate" UDPs (which may not even get sent, we're just triggering arp requests for unknown hosts)
		socket(SOCKET, PF_INET, SOCK_DGRAM, getprotobyname("udp")) || die $!;
		my $zero = "";
		my $port = 1337;
		for my $octet (0 .. 255)
		{
			my $addr = sockaddr_in($port, inet_aton("$ip.$octet"));
			send(SOCKET, $zero, 0, $addr);
		}
	}
}
arp();

sub arp
{
  foreach my $match (`$ARP_PATH -na`)
  {
    chomp($match);
    $match =~ s/ \[ethernet\]|^\? | ifscope|[()]| permanent//g;
    if ($match =~ /at (\w\S+)/ && $1)
    {
    	my $mac = join ":", map { sprintf("%02s", $_) } split /:/, lc $1;
      my @oui = `oui $mac`;
      shift @oui;
      my $oui = "$oui[0] $oui[-1]";
			$oui =~ s/\r|\n//g;

			#$match .= ": " . join(", ", map { s/\r//g; chomp; $_ } @oui) if @oui;
      $match =~ s/ at \w\S+/ $mac/;
      $match =~ s/ on//g;
      $match =~ s/^(\S+)/sprintf("%-15s", $1)/e;

			# do we know it?
			$match .= $known{$mac} ? " [$known{$mac}]" : " [?????]";

			# add oui
      $match .= " $oui" if @oui;
    }
    print "$match\n" unless $match =~ /incomplete|ff:ff:ff:ff:ff:ff/i;
  }
}
