#!/usr/bin/perl
#
# convert (TLS decrypted) netcat websocket output to text
#
# -samy kamkar, 2019/12/07

use strict;

my $CLEAN = 1; # cleanup chars I don't care about
my $idx = 0;
my $data = "";
my $lastidx - 1;

while (<>)
{
  # read ncat hex format
  if (/^\[(\w+)\]\s+((?:\w\w\s{0,3}){1,16})/)
  {
    $idx = hex($1);
    my $txt = $2;

    if ($idx > $lastidx) # part of last packet
    {
      $data .= $txt;
    }
    else
    {
      printData($data);
      $data = $txt;
    }
    $lastidx = $idx;
  }
  else
  {
    print STDERR "Error: unknown data: $_\n";
  }
}

sub printData
{
  my $data = shift;
  $data =~ s/\s//g;
  return unless length($data);
  #print "DATA=$data\n";
  $data = pack("H*", $data);

  # if data is Fin=1, Reserved=000
  if (ord(substr($data, 0, 1)) >> 4 == 0b1000)
  {
    parseWS($data);
  }
  else
  {
    $data =~ s/\r//g;
    print "Text: $data\n";
  }
}

sub parseWS
{
  my $bin = shift;
  #1000001010011110
  my $hdr = [split //, unpack("B16", substr($bin, 0, 2, ""))];
  my ($fin, $res, $opc, $msk, $len) = bits($hdr, 1, 3, 4, 1, 7);

  # extended packet length
  $len = unpack("n", substr($bin, 0, 2, "")) if $len == 126;
  $len = unpack("q", substr($bin, 0, 8, "")) if $len == 127;

  # masking key
  my $key = substr($bin, 0, 4, "") if $msk;

  if ($fin != 1 || $res != 0 || length($bin) < $len)
  {
    print "ERROR fin=$fin res=$res opc=$opc msk=$msk len=$len left=" . length($bin) . "\n";
  }

  my $payload = substr($bin, 0, $len, "");

  if ($msk)
  {
    my $tmpkey = substr($key x (length($payload) / length($key) + 1), 0, length($payload));
    $payload ^= $tmpkey;
  }

  # is payload supposed to be double packed?
  if (ord(substr($payload, 0, 1)) >> 4 == 0b1000)
  {
    print "double packed\n";
    parseWS($payload);
  }
  elsif (substr($payload, 0, 1) eq "\x00")
  {
    my @out = split(/\0/, $payload);
    $out[0] = ord($out[0]);
    $out[1] = ord($out[1]);
    print "payload $out[0] -> $out[1] -> $out[2] ($#out, plen=" . length($payload) . ")\n";
  }
  else
  {
    print "payload: $payload (opcode=$opc masked=$msk length=$len LEFT=" . length($bin) . ")\n";
  }

  parseWS($bin) if length($bin);
}

# shift bits out and convert to decimal
sub bits
{
  my $ary = shift;
  #print "ARY @{$ary}\n";
  my @ret;
  foreach my $len (@_)
  {
    my $bits = "0" x (8 - $len) . join("", splice @{$ary}, 0, $len);
    #print "BIN len=$len bits=$bits\n";
    push @ret, ord(pack("B8", $bits));
  }
  return @ret;
}